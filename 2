âœ… 1. User Management System
js
Copy
Edit
// user-management.js
const express = require('express');
const app = express();
app.use(express.json());

let users = [];
let nextId = 1;

// Get all users
app.get('/users', (req, res) => {
  res.json(users);
});

// Add a new user
app.post('/users', (req, res) => {
  const { name, email } = req.body;
  const newUser = { id: nextId++, name, email };
  users.push(newUser);
  res.json({ message: 'User added successfully', user: newUser });
});

// Delete user by ID
app.delete('/users/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const index = users.findIndex(user => user.id === id);

  if (index === -1) {
    return res.status(404).json({ error: 'User not found' });
  }

  const removedUser = users.splice(index, 1)[0];
  res.json({ message: 'User deleted successfully', user: removedUser });
});

app.listen(3000, () => console.log('User management app running on port 3000'));


âœ… 2. Product Catalog (PUT for Updates)
js
Copy
Edit
// product-catalog.js
const express = require('express');
const app = express();
app.use(express.json());

let products = [
  { id: 1, name: 'Laptop', price: 1000, stock: 10 },
  { id: 2, name: 'Mouse', price: 20, stock: 100 }
];

// Update product details
app.put('/products/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const product = products.find(p => p.id === id);

  if (!product) {
    return res.status(404).json({ error: 'Product not found' });
  }

  const { name, price, stock } = req.body;
  if (name !== undefined) product.name = name;
  if (price !== undefined) product.price = price;
  if (stock !== undefined) product.stock = stock;

  res.json({ message: 'Product updated successfully', product });
});

app.listen(3000, () => console.log('Product catalog app running on port 3000'));


âœ… 3. Book Management App
js
Copy
Edit
// book-manager.js
const express = require('express');
const app = express();
app.use(express.json());

let books = [
  { id: 1, title: '1984', author: 'George Orwell' },
  { id: 2, title: 'The Hobbit', author: 'J.R.R. Tolkien' }
];
let nextId = 3;

// a. GET all books
app.get('/books', (req, res) => {
  res.send(JSON.stringify(books, null, 2));
});

// b. POST new book
app.post('/books', (req, res) => {
  const { title, author } = req.body;
  const newBook = { id: nextId++, title, author };
  books.push(newBook);
  res.send(`Book added: ${JSON.stringify(newBook)}`);
});

// c. PUT to update book
app.put('/books/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const book = books.find(b => b.id === id);

  if (!book) {
    return res.status(404).send('Book not found');
  }

  const { title, author } = req.body;
  if (title !== undefined) book.title = title;
  if (author !== undefined) book.author = author;

  res.send(`Book updated: ${JSON.stringify(book)}`);
});

// d. DELETE book
app.delete('/books/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const index = books.findIndex(b => b.id === id);

  if (index === -1) {
    return res.status(404).send('Book not found');
  }

  const deleted = books.splice(index, 1)[0];
  res.send(`Book deleted: ${JSON.stringify(deleted)}`);
});

app.listen(3000, () => console.log('Book manager running on port 3000'));
ðŸ“¦ To Run These:
Save each block in a separate file (user-management.js, product-catalog.js, book-manager.js)

Install Express (if not installed):

bash
Copy
Edit
npm install express
Run any file:

bash
Copy
Edit
node user-management.js
